package herokuapi

import (
	"encoding/json"
	"flag"
	"io/ioutil"
	"net/http"
)

func FlagVar(fl *flag.FlagSet) func() (connectionURL string, err error) {
	apiKey := fl.String("heroku-api-key", "", "`API key` for retreiving config from Heroku")
	addOn := fl.String("heroku-add-on-id", "", "`ID` for Heroku Add-On to get config from")
	return func() (connectionURL string, err error) {
		if *apiKey == "" || *addOn == "" {
			return "", nil
		}

		// Generated by curl-to-Go: https://mholt.github.io/curl-to-go

		req, err := http.NewRequest("GET", "https://api.heroku.com/addons/"+
			*addOn+"/config", nil)
		if err != nil {
			return "", err
		}
		req.Header.Set("Authorization", "Bearer "+*apiKey)
		req.Header.Set("Accept", "application/vnd.heroku+json; version=3")

		resp, err := http.DefaultClient.Do(req)
		if err != nil {
			return "", err
		}
		defer resp.Body.Close()

		b, err := ioutil.ReadAll(resp.Body)
		if err != nil {
			return "", err
		}
		var values []struct {
			Name  string `json:"name"`
			Value string `json:"value"`
		}
		if err = json.Unmarshal(b, &values); err != nil {
			return
		}
		for _, val := range values {
			if val.Name == "URL" {
				connectionURL = val.Value
			}
		}
		return connectionURL, nil
	}
}
